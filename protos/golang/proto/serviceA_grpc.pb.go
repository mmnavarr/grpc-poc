// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.1
// source: proto/serviceA.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceAClient is the client API for ServiceA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAClient interface {
	// Sends a hello
	SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
	FetchNames(ctx context.Context, in *FetchNamesRequest, opts ...grpc.CallOption) (ServiceA_FetchNamesClient, error)
}

type serviceAClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAClient(cc grpc.ClientConnInterface) ServiceAClient {
	return &serviceAClient{cc}
}

func (c *serviceAClient) SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	out := new(SayHelloResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ServiceA/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAClient) FetchNames(ctx context.Context, in *FetchNamesRequest, opts ...grpc.CallOption) (ServiceA_FetchNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceA_ServiceDesc.Streams[0], "/protobuf.ServiceA/FetchNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceAFetchNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceA_FetchNamesClient interface {
	Recv() (*FetchNamesResponse, error)
	grpc.ClientStream
}

type serviceAFetchNamesClient struct {
	grpc.ClientStream
}

func (x *serviceAFetchNamesClient) Recv() (*FetchNamesResponse, error) {
	m := new(FetchNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceAServer is the server API for ServiceA service.
// All implementations must embed UnimplementedServiceAServer
// for forward compatibility
type ServiceAServer interface {
	// Sends a hello
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	FetchNames(*FetchNamesRequest, ServiceA_FetchNamesServer) error
	mustEmbedUnimplementedServiceAServer()
}

// UnimplementedServiceAServer must be embedded to have forward compatible implementations.
type UnimplementedServiceAServer struct {
}

func (UnimplementedServiceAServer) SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedServiceAServer) FetchNames(*FetchNamesRequest, ServiceA_FetchNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchNames not implemented")
}
func (UnimplementedServiceAServer) mustEmbedUnimplementedServiceAServer() {}

// UnsafeServiceAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAServer will
// result in compilation errors.
type UnsafeServiceAServer interface {
	mustEmbedUnimplementedServiceAServer()
}

func RegisterServiceAServer(s grpc.ServiceRegistrar, srv ServiceAServer) {
	s.RegisterService(&ServiceA_ServiceDesc, srv)
}

func _ServiceA_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ServiceA/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAServer).SayHello(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceA_FetchNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceAServer).FetchNames(m, &serviceAFetchNamesServer{stream})
}

type ServiceA_FetchNamesServer interface {
	Send(*FetchNamesResponse) error
	grpc.ServerStream
}

type serviceAFetchNamesServer struct {
	grpc.ServerStream
}

func (x *serviceAFetchNamesServer) Send(m *FetchNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServiceA_ServiceDesc is the grpc.ServiceDesc for ServiceA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ServiceA",
	HandlerType: (*ServiceAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ServiceA_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchNames",
			Handler:       _ServiceA_FetchNames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/serviceA.proto",
}
